// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/api.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PetServiceClient is the client API for PetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetServiceClient interface {
	NewPet(ctx context.Context, in *NewPetRequest, opts ...grpc.CallOption) (*NewPetResponse, error)
	ListPets(ctx context.Context, in *ListPetsRequest, opts ...grpc.CallOption) (*ListPetsResponse, error)
	DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetResponse, error)
	CreateMeal(ctx context.Context, in *CreateMealRequest, opts ...grpc.CallOption) (*ListMealsResponse, error)
	GetMeals(ctx context.Context, in *ListMealsRequest, opts ...grpc.CallOption) (PetService_GetMealsClient, error)
}

type petServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetServiceClient(cc grpc.ClientConnInterface) PetServiceClient {
	return &petServiceClient{cc}
}

func (c *petServiceClient) NewPet(ctx context.Context, in *NewPetRequest, opts ...grpc.CallOption) (*NewPetResponse, error) {
	out := new(NewPetResponse)
	err := c.cc.Invoke(ctx, "/proto.PetService/NewPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) ListPets(ctx context.Context, in *ListPetsRequest, opts ...grpc.CallOption) (*ListPetsResponse, error) {
	out := new(ListPetsResponse)
	err := c.cc.Invoke(ctx, "/proto.PetService/ListPets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*DeletePetResponse, error) {
	out := new(DeletePetResponse)
	err := c.cc.Invoke(ctx, "/proto.PetService/DeletePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) CreateMeal(ctx context.Context, in *CreateMealRequest, opts ...grpc.CallOption) (*ListMealsResponse, error) {
	out := new(ListMealsResponse)
	err := c.cc.Invoke(ctx, "/proto.PetService/CreateMeal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) GetMeals(ctx context.Context, in *ListMealsRequest, opts ...grpc.CallOption) (PetService_GetMealsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PetService_ServiceDesc.Streams[0], "/proto.PetService/GetMeals", opts...)
	if err != nil {
		return nil, err
	}
	x := &petServiceGetMealsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PetService_GetMealsClient interface {
	Recv() (*Meal, error)
	grpc.ClientStream
}

type petServiceGetMealsClient struct {
	grpc.ClientStream
}

func (x *petServiceGetMealsClient) Recv() (*Meal, error) {
	m := new(Meal)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PetServiceServer is the server API for PetService service.
// All implementations must embed UnimplementedPetServiceServer
// for forward compatibility
type PetServiceServer interface {
	NewPet(context.Context, *NewPetRequest) (*NewPetResponse, error)
	ListPets(context.Context, *ListPetsRequest) (*ListPetsResponse, error)
	DeletePet(context.Context, *DeletePetRequest) (*DeletePetResponse, error)
	CreateMeal(context.Context, *CreateMealRequest) (*ListMealsResponse, error)
	GetMeals(*ListMealsRequest, PetService_GetMealsServer) error
	mustEmbedUnimplementedPetServiceServer()
}

// UnimplementedPetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetServiceServer struct {
}

func (UnimplementedPetServiceServer) NewPet(context.Context, *NewPetRequest) (*NewPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPet not implemented")
}
func (UnimplementedPetServiceServer) ListPets(context.Context, *ListPetsRequest) (*ListPetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPets not implemented")
}
func (UnimplementedPetServiceServer) DeletePet(context.Context, *DeletePetRequest) (*DeletePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedPetServiceServer) CreateMeal(context.Context, *CreateMealRequest) (*ListMealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeal not implemented")
}
func (UnimplementedPetServiceServer) GetMeals(*ListMealsRequest, PetService_GetMealsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMeals not implemented")
}
func (UnimplementedPetServiceServer) mustEmbedUnimplementedPetServiceServer() {}

// UnsafePetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetServiceServer will
// result in compilation errors.
type UnsafePetServiceServer interface {
	mustEmbedUnimplementedPetServiceServer()
}

func RegisterPetServiceServer(s grpc.ServiceRegistrar, srv PetServiceServer) {
	s.RegisterService(&PetService_ServiceDesc, srv)
}

func _PetService_NewPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).NewPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PetService/NewPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).NewPet(ctx, req.(*NewPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_ListPets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).ListPets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PetService/ListPets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).ListPets(ctx, req.(*ListPetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PetService/DeletePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_CreateMeal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).CreateMeal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PetService/CreateMeal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).CreateMeal(ctx, req.(*CreateMealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_GetMeals_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMealsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PetServiceServer).GetMeals(m, &petServiceGetMealsServer{stream})
}

type PetService_GetMealsServer interface {
	Send(*Meal) error
	grpc.ServerStream
}

type petServiceGetMealsServer struct {
	grpc.ServerStream
}

func (x *petServiceGetMealsServer) Send(m *Meal) error {
	return x.ServerStream.SendMsg(m)
}

// PetService_ServiceDesc is the grpc.ServiceDesc for PetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PetService",
	HandlerType: (*PetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewPet",
			Handler:    _PetService_NewPet_Handler,
		},
		{
			MethodName: "ListPets",
			Handler:    _PetService_ListPets_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _PetService_DeletePet_Handler,
		},
		{
			MethodName: "CreateMeal",
			Handler:    _PetService_CreateMeal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMeals",
			Handler:       _PetService_GetMeals_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/api.proto",
}
