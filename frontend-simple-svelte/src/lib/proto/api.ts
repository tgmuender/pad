// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "api.proto" (package "proto", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message proto.NewPetRequest
 */
export interface NewPetRequest {
    /**
     * The name of the pet, e.g. "Buddy"
     *
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * Optional
     *
     * @generated from protobuf field: proto.Sex sex = 2;
     */
    sex: Sex;
    /**
     * Optional: type of the pet, e.g. "dog", "cat", etc.
     *
     * @generated from protobuf field: string type = 3;
     */
    type: string;
    /**
     * Optional: date of birth, e.g. "2020-01-01T00:00:00Z"
     *
     * @generated from protobuf field: google.protobuf.Timestamp dob = 4;
     */
    dob?: Timestamp;
    /**
     * Optional: a description of the pet, e.g. "A friendly dog"
     *
     * @generated from protobuf field: string description = 5;
     */
    description: string;
}
/**
 * @generated from protobuf message proto.NewPetResponse
 */
export interface NewPetResponse {
    /**
     * The unique identifier of the pet
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * The name of the pet
     *
     * @generated from protobuf field: string name = 2;
     */
    name: string;
}
/**
 * @generated from protobuf message proto.DeletePetRequest
 */
export interface DeletePetRequest {
    /**
     * The unique identifier of the pet to be deleted
     *
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message proto.DeletePetResponse
 */
export interface DeletePetResponse {
}
/**
 * @generated from protobuf message proto.Pet
 */
export interface Pet {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: proto.Sex sex = 3;
     */
    sex: Sex;
    /**
     * @generated from protobuf field: string type = 4;
     */
    type: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp dob = 5;
     */
    dob?: Timestamp;
}
/**
 * @generated from protobuf message proto.ListPetsResponse
 */
export interface ListPetsResponse {
    /**
     * @generated from protobuf field: repeated proto.Pet pets = 1;
     */
    pets: Pet[];
}
/**
 * @generated from protobuf message proto.ListPetsRequest
 */
export interface ListPetsRequest {
}
/**
 * @generated from protobuf message proto.PetOverviewRequest
 */
export interface PetOverviewRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message proto.CreateMealRequest
 */
export interface CreateMealRequest {
    /**
     * @generated from protobuf field: proto.Meal meal = 1;
     */
    meal?: Meal;
}
/**
 * @generated from protobuf message proto.ListMealsRequest
 */
export interface ListMealsRequest {
    /**
     * @generated from protobuf field: string petId = 1;
     */
    petId: string;
}
/**
 * @generated from protobuf message proto.ListMealsResponse
 */
export interface ListMealsResponse {
    /**
     * @generated from protobuf field: repeated proto.Meal meals = 1;
     */
    meals: Meal[];
}
/**
 * TODO: data types?
 *
 * @generated from protobuf message proto.Meal
 */
export interface Meal {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string description = 2;
     */
    description: string; // general info
    /**
     * @generated from protobuf field: int32 repetition = 3;
     */
    repetition: number; // read (with time unit): every *1* *day*
    /**
     * @generated from protobuf field: string timeUnit = 4;
     */
    timeUnit: string; // e.g. daily, weekly, etc.
    /**
     * @generated from protobuf field: string time = 5;
     */
    time: string; // e.g
    /**
     * @generated from protobuf field: repeated proto.MealIngredient ingredients = 6;
     */
    ingredients: MealIngredient[]; // comp
    /**
     * @generated from protobuf field: string petId = 7;
     */
    petId: string;
}
/**
 * @generated from protobuf message proto.MealIngredient
 */
export interface MealIngredient {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string quantity = 3;
     */
    quantity: string;
}
/**
 * @generated from protobuf enum proto.Sex
 */
export enum Sex {
    /**
     * @generated from protobuf enum value: MALE = 0;
     */
    MALE = 0,
    /**
     * @generated from protobuf enum value: FEMALE = 1;
     */
    FEMALE = 1,
    /**
     * @generated from protobuf enum value: UNKNOWN = 2;
     */
    UNKNOWN = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class NewPetRequest$Type extends MessageType<NewPetRequest> {
    constructor() {
        super("proto.NewPetRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "sex", kind: "enum", T: () => ["proto.Sex", Sex] },
            { no: 3, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "dob", kind: "message", T: () => Timestamp },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NewPetRequest>): NewPetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.sex = 0;
        message.type = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<NewPetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewPetRequest): NewPetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* proto.Sex sex */ 2:
                    message.sex = reader.int32();
                    break;
                case /* string type */ 3:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Timestamp dob */ 4:
                    message.dob = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dob);
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewPetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* proto.Sex sex = 2; */
        if (message.sex !== 0)
            writer.tag(2, WireType.Varint).int32(message.sex);
        /* string type = 3; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Timestamp dob = 4; */
        if (message.dob)
            Timestamp.internalBinaryWrite(message.dob, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.NewPetRequest
 */
export const NewPetRequest = new NewPetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewPetResponse$Type extends MessageType<NewPetResponse> {
    constructor() {
        super("proto.NewPetResponse", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NewPetResponse>): NewPetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<NewPetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewPetResponse): NewPetResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewPetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.NewPetResponse
 */
export const NewPetResponse = new NewPetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePetRequest$Type extends MessageType<DeletePetRequest> {
    constructor() {
        super("proto.DeletePetRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeletePetRequest>): DeletePetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<DeletePetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePetRequest): DeletePetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeletePetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeletePetRequest
 */
export const DeletePetRequest = new DeletePetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeletePetResponse$Type extends MessageType<DeletePetResponse> {
    constructor() {
        super("proto.DeletePetResponse", []);
    }
    create(value?: PartialMessage<DeletePetResponse>): DeletePetResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeletePetResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeletePetResponse): DeletePetResponse {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DeletePetResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.DeletePetResponse
 */
export const DeletePetResponse = new DeletePetResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Pet$Type extends MessageType<Pet> {
    constructor() {
        super("proto.Pet", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sex", kind: "enum", T: () => ["proto.Sex", Sex] },
            { no: 4, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "dob", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<Pet>): Pet {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.sex = 0;
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<Pet>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Pet): Pet {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* proto.Sex sex */ 3:
                    message.sex = reader.int32();
                    break;
                case /* string type */ 4:
                    message.type = reader.string();
                    break;
                case /* google.protobuf.Timestamp dob */ 5:
                    message.dob = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dob);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Pet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* proto.Sex sex = 3; */
        if (message.sex !== 0)
            writer.tag(3, WireType.Varint).int32(message.sex);
        /* string type = 4; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* google.protobuf.Timestamp dob = 5; */
        if (message.dob)
            Timestamp.internalBinaryWrite(message.dob, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Pet
 */
export const Pet = new Pet$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPetsResponse$Type extends MessageType<ListPetsResponse> {
    constructor() {
        super("proto.ListPetsResponse", [
            { no: 1, name: "pets", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Pet }
        ]);
    }
    create(value?: PartialMessage<ListPetsResponse>): ListPetsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.pets = [];
        if (value !== undefined)
            reflectionMergePartial<ListPetsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPetsResponse): ListPetsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Pet pets */ 1:
                    message.pets.push(Pet.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListPetsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Pet pets = 1; */
        for (let i = 0; i < message.pets.length; i++)
            Pet.internalBinaryWrite(message.pets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ListPetsResponse
 */
export const ListPetsResponse = new ListPetsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListPetsRequest$Type extends MessageType<ListPetsRequest> {
    constructor() {
        super("proto.ListPetsRequest", []);
    }
    create(value?: PartialMessage<ListPetsRequest>): ListPetsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListPetsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListPetsRequest): ListPetsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListPetsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ListPetsRequest
 */
export const ListPetsRequest = new ListPetsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PetOverviewRequest$Type extends MessageType<PetOverviewRequest> {
    constructor() {
        super("proto.PetOverviewRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PetOverviewRequest>): PetOverviewRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<PetOverviewRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PetOverviewRequest): PetOverviewRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PetOverviewRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.PetOverviewRequest
 */
export const PetOverviewRequest = new PetOverviewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateMealRequest$Type extends MessageType<CreateMealRequest> {
    constructor() {
        super("proto.CreateMealRequest", [
            { no: 1, name: "meal", kind: "message", T: () => Meal }
        ]);
    }
    create(value?: PartialMessage<CreateMealRequest>): CreateMealRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateMealRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateMealRequest): CreateMealRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* proto.Meal meal */ 1:
                    message.meal = Meal.internalBinaryRead(reader, reader.uint32(), options, message.meal);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateMealRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* proto.Meal meal = 1; */
        if (message.meal)
            Meal.internalBinaryWrite(message.meal, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.CreateMealRequest
 */
export const CreateMealRequest = new CreateMealRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMealsRequest$Type extends MessageType<ListMealsRequest> {
    constructor() {
        super("proto.ListMealsRequest", [
            { no: 1, name: "petId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListMealsRequest>): ListMealsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.petId = "";
        if (value !== undefined)
            reflectionMergePartial<ListMealsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMealsRequest): ListMealsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string petId */ 1:
                    message.petId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMealsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string petId = 1; */
        if (message.petId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.petId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ListMealsRequest
 */
export const ListMealsRequest = new ListMealsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMealsResponse$Type extends MessageType<ListMealsResponse> {
    constructor() {
        super("proto.ListMealsResponse", [
            { no: 1, name: "meals", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Meal }
        ]);
    }
    create(value?: PartialMessage<ListMealsResponse>): ListMealsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.meals = [];
        if (value !== undefined)
            reflectionMergePartial<ListMealsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMealsResponse): ListMealsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated proto.Meal meals */ 1:
                    message.meals.push(Meal.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMealsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated proto.Meal meals = 1; */
        for (let i = 0; i < message.meals.length; i++)
            Meal.internalBinaryWrite(message.meals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.ListMealsResponse
 */
export const ListMealsResponse = new ListMealsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Meal$Type extends MessageType<Meal> {
    constructor() {
        super("proto.Meal", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "repetition", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "timeUnit", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "time", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ingredients", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MealIngredient },
            { no: 7, name: "petId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Meal>): Meal {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.description = "";
        message.repetition = 0;
        message.timeUnit = "";
        message.time = "";
        message.ingredients = [];
        message.petId = "";
        if (value !== undefined)
            reflectionMergePartial<Meal>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Meal): Meal {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string description */ 2:
                    message.description = reader.string();
                    break;
                case /* int32 repetition */ 3:
                    message.repetition = reader.int32();
                    break;
                case /* string timeUnit */ 4:
                    message.timeUnit = reader.string();
                    break;
                case /* string time */ 5:
                    message.time = reader.string();
                    break;
                case /* repeated proto.MealIngredient ingredients */ 6:
                    message.ingredients.push(MealIngredient.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string petId */ 7:
                    message.petId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Meal, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string description = 2; */
        if (message.description !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* int32 repetition = 3; */
        if (message.repetition !== 0)
            writer.tag(3, WireType.Varint).int32(message.repetition);
        /* string timeUnit = 4; */
        if (message.timeUnit !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timeUnit);
        /* string time = 5; */
        if (message.time !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.time);
        /* repeated proto.MealIngredient ingredients = 6; */
        for (let i = 0; i < message.ingredients.length; i++)
            MealIngredient.internalBinaryWrite(message.ingredients[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string petId = 7; */
        if (message.petId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.petId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.Meal
 */
export const Meal = new Meal$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MealIngredient$Type extends MessageType<MealIngredient> {
    constructor() {
        super("proto.MealIngredient", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "quantity", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MealIngredient>): MealIngredient {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.quantity = "";
        if (value !== undefined)
            reflectionMergePartial<MealIngredient>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MealIngredient): MealIngredient {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string quantity */ 3:
                    message.quantity = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MealIngredient, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string quantity = 3; */
        if (message.quantity !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message proto.MealIngredient
 */
export const MealIngredient = new MealIngredient$Type();
/**
 * @generated ServiceType for protobuf service proto.PetService
 */
export const PetService = new ServiceType("proto.PetService", [
    { name: "NewPet", options: {}, I: NewPetRequest, O: NewPetResponse },
    { name: "ListPets", options: {}, I: ListPetsRequest, O: ListPetsResponse },
    { name: "DeletePet", options: {}, I: DeletePetRequest, O: DeletePetResponse },
    { name: "CreateMeal", options: {}, I: CreateMealRequest, O: ListMealsResponse },
    { name: "GetMeals", serverStreaming: true, options: {}, I: ListMealsRequest, O: Meal }
]);
