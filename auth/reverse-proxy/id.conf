upstream public_api {
        server kratos:4433;
}
upstream admin_api {
        server kratos:4434;
}
upstream ui_node {
        server kratos-ui:3000;
}

server {
    listen 80;
    server_name id.petadvisor.internal;

    location /auth {
        rewrite /auth/(.*) /$1  break;

        proxy_pass http://ui_node;
        proxy_redirect          off;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / {
        proxy_pass http://public_api;
        proxy_redirect          off;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /admin {
        # Example of managing access control
        # for the /admin endpoint
        # in that example we allow access
        # either from the subnet
        # or by checking query parameter ?secret=
        set $allow 0;

        # Check against remote address
        if ($remote_addr ~* "172.24.0.*") {
                set $allow 1;
        }

        # Check against ?secret param
        if ($arg_secret = "GuQ8alL2") {
                set $allow 1;
        }
        if ($allow = 0) {
                return 403;
        }

        rewrite /admin/(.*) /$1  break;

        proxy_pass http://admin_api;
        proxy_redirect          off;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /identities {
        proxy_pass http://admin_api;
        proxy_redirect          off;
        proxy_set_header        Host            $host;
        proxy_set_header        X-Real-IP       $remote_addr;
        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    error_page 401 = @error401;
    # Catch if 401/unauthorized and redirect for login
    location @error401 {
            return 302 https://accounts.example.com/auth/login;
    }
}